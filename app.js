// Generated by CoffeeScript 1.7.1
(function() {
  var addChainedAttributeAccessor, draw,
    __slice = [].slice;

  L.D3 = L.Class.extend({
    includes: L.Mixin.Events,
    options: {
      type: "json",
      topojson: false,
      pathClass: "path"
    },
    initialize: function(data, options) {
      var _this;
      _this = this;
      L.setOptions(_this, options);
      _this._loaded = false;
      if (typeof data === "string") {
        d3[_this.options.type](data, function(err, json) {
          if (err) {
            return;
          } else {
            if (_this.options.topojson) {
              _this.data = topojson.object(json, json.objects[_this.options.topojson]);
            } else if (L.Util.isArray(json)) {
              _this.data = {
                type: "FeatureCollection",
                features: json
              };
            } else {
              _this.data = json;
            }
            _this._loaded = true;
            _this.fire("dataLoaded");
          }
        });
      } else {
        if (_this.options.topojson) {
          _this.data = topojson.object(data, data.objects[_this.options.topojson]);
        } else if (L.Util.isArray(data)) {
          _this.data = {
            type: "FeatureCollection",
            features: data
          };
        } else {
          _this.data = data;
        }
        _this._loaded = true;
        _this.fire("dataLoaded");
      }
    },
    onAdd: function(map) {
      this._map = map;
      this._project = function(x) {
        var point;
        point = map.latLngToLayerPoint(new L.LatLng(x[1], x[0]));
        return [point.x, point.y];
      };
      this._el = d3.select(this._map.getPanes().overlayPane).append("svg");
      this._g = this._el.append("g").attr("class", (this.options.svgClass ? this.options.svgClass + " leaflet-zoom-hide" : "leaflet-zoom-hide"));
      if (this._loaded) {
        this.onLoaded();
      } else {
        this.on("dataLoaded", this.onLoaded, this);
      }
      this._popup = L.popup();
      this.fire("added");
    },
    addTo: function(map) {
      map.addLayer(this);
      return this;
    },
    onLoaded: function() {
      this.bounds = d3.geo.bounds(this.data);
      this.path = d3.geo.path().projection(this._project);
      if (this.options.before) {
        this.options.before.call(this, this.data);
      }
      this._feature = this._g.selectAll("path").data((this.options.topojson ? this.data.geometries : this.data.features)).enter().append("path").attr("class", this.options.pathClass);
      this._map.on("viewreset", this._reset, this);
      this._reset();
    },
    onRemove: function(map) {
      this._el.remove();
      map.off("viewreset", this._reset, this);
    },
    _reset: function() {
      var bottomLeft, topRight;
      bottomLeft = this._project(this.bounds[0]);
      topRight = this._project(this.bounds[1]);
      this._el.attr("width", topRight[0] - bottomLeft[0]).attr("height", bottomLeft[1] - topRight[1]).style("margin-left", bottomLeft[0] + "px").style("margin-top", topRight[1] + "px");
      this._g.attr("transform", "translate(" + -bottomLeft[0] + "," + -topRight[1] + ")");
      this._feature.attr("d", this.path);
    },
    bindPopup: function(content) {
      this._popup = L.popup();
      this._popupContent = content;
      if (this._map) {
        this._bindPopup();
      }
      this.on("added", (function() {
        this._bindPopup();
      }), this);
    },
    _bindPopup: function() {
      var _this;
      _this = this;
      _this._g.on("click", (function() {
        var props;
        props = d3.select(d3.event.target).datum().properties;
        if (typeof _this._popupContent === "string") {
          _this.fire("pathClicked", {
            cont: _this._popupContent
          });
        } else if (typeof _this._popupContent === "function") {
          _this.fire("pathClicked", {
            cont: _this._popupContent(props)
          });
        }
      }), true);
      _this.on("pathClicked", function(e) {
        _this._popup.setContent(e.cont);
        _this._openable = true;
      });
      _this._map.on("click", function(e) {
        if (_this._openable) {
          _this._openable = false;
          _this._popup.setLatLng(e.latlng).openOn(_this._map);
        }
      });
    }
  });

  L.d3 = function(data, options) {
    return new L.D3(data, options);
  };

  L.ParaText = L.Class.extend({
    initialize: function(text) {
      this.text = text;
      this.properties = {
        id: 0,
        members: [],
        _margin: {
          t: 20,
          l: 30,
          b: 30,
          r: 30
        },
        relations: {},
        lat: 0,
        long: 0
      };
    },
    addTo: function(map) {
      map.addLayer(this);
      return this;
    },
    getD3: function() {
      this._count = 0;
      this._canvas = $(".canvas");
      this._width = this._canvas.width() - this.properties._margin.l - this.properties._margin.r;
      this._height = this._canvas.height() - this.properties._margin.t - this.properties._margin.b;
      this._svg = d3.select(".").append("svg").attr("width", this._width + this.properties._margin.l + this.properties._margin.r).attr("height", this._height + this.properties._margin.t + this.properties._margin.b).append("g").attr("transform", "translate(" + this.properties._margin.l + "," + this.properties._margin.t + ")");
      this._svg.selectAll("text").data(this.properties.text).enter().append("text").attr("width", 2400).attr("height", 200).style("font-family", "Impact").attr("fill", "black").text(function(d) {
        return d.description;
      }).on("mouseover", function() {
        d3.select(this).transition().duration(300).style("fill", "gray");
      }).on("mouseout", function() {
        d3.select(this).transition().duration(300).style("fill", "black");
      }).transition().delay(0).duration(1).each("start", function() {
        d3.select(this).transition().duration(1).attr("y", (this._count + 1) * 30);
        this._count = this._count + 1;
      }).transition().duration(11).delay(1).style("opacity", 1);
      this._count = this._count + 1;
      return this._svg;
    },
    makeMap: function() {
      var map, textControl;
      map = $("body").append("<div id='map'></div>");
      L.mapbox.accessToken = "pk.eyJ1IjoiYXJtaW5hdm4iLCJhIjoiSTFteE9EOCJ9.iDzgmNaITa0-q-H_jw1lJw";
      this._m = L.mapbox.map("map", "arminavn.ib1f592g").setView([40, -74.50], 9);
      this._m.dragging.disable();
      this._m.scrollWheelZoom.disable();
      textControl = L.Control.extend({
        options: {
          position: "topleft"
        },
        onAdd: function(map) {
          var disable3D;
          this._m = map;
          this._textDomEl = L.DomUtil.create('div', 'container paratext-info');
          L.DomUtil.enableTextSelection(this._textDomEl);
          this._m.getPanes().overlayPane.appendChild(this._textDomEl);
          this._textDomObj = $(L.DomUtil.get(this._textDomEl));
          this._textDomObj.css('width', $(this._m.getContainer())[0].clientWidth / 3);
          this._textDomObj.css('height', $(this._m.getContainer())[0].clientHeight - 20);
          this._textDomObj.css('background-color', 'white');
          L.DomUtil.setOpacity(L.DomUtil.get(this._textDomEl), 0.7);
          console.log($(this._m.getContainer()));
          if (this._viewSet === void 0) {
            this._viewSet = this._m.getCenter();
          }
          console.log(this._viewSet);
          L.DomUtil.setPosition(L.DomUtil.get(this._textDomEl), L.point(40, 0), disable3D = 0);
          return this._textDomEl;
        }
      });
      this._m.addControl(new textControl());
      this._d3text = d3.select(".paratext-info").append("svg").attr("width", $(this._m.getContainer())[0].clientWidth / 3).attr("height", $(this._m.getContainer())[0].clientHeight - 20).append("g").selectAll("text").data(this.text).enter().append("text").attr("width", $(this._m.getContainer())[0].clientWidth / 3).attr("height", $(this._m.getContainer())[0].clientHeight - 20).style("font-family", "Helvetica").attr("fill", "black").text(function(d, i) {
        return d.description;
      }).on("mouseover", function() {
        d3.select(this).transition().duration(1).style("fill", "gray");
      }).on("mouseout", function() {
        d3.select(this).transition().duration(1).style("fill", "black");
      }).transition().delay(0).duration(1).each("start", function(d, i) {
        d3.select(this).attr("y", function() {
          return i * 30;
        });
      }).transition().duration(1).delay(1).style("opacity", 1);
      return this._m;
    },
    connectRelation: function() {
      return this.raw_text = this.properties.text;
    }
  });

  L.paratext = function(text) {
    return new L.ParaText(text);
  };

  addChainedAttributeAccessor = function(obj, propertyAttr, attr) {
    return obj[attr] = function() {
      var newValues;
      newValues = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (newValues.length === 0) {
        return obj[propertyAttr][attr];
      } else {
        obj[propertyAttr][attr] = newValues[0];
        return obj;
      }
    };
  };

  queue().defer(d3.csv, "ccn_18062014_sample.csv").await(function(err, texts) {
    draw(texts);
  });

  draw = function(data) {
    var $texts, paratext, textmap, texts;
    paratext = L.paratext(data);
    textmap = paratext.makeMap();
    texts = d3.selectAll("text");
    $texts = $(texts[0]);
    $texts.each(function() {
      $(this).data("datum", $(this).prop("__data__"));
    });
    $texts.on("mouseover", function() {
      console.log("click");
      console.log("$text", this);
      return paratext._m.setView(new L.LatLng(this.__data__.lat, this.__data__.long), 16);
    });
  };

}).call(this);
