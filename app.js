// Generated by CoffeeScript 1.7.1
(function() {
  var addChainedAttributeAccessor, draw,
    __slice = [].slice;

  L.ParaText = L.Class.extend({
    initialize: function(text) {
      this.text = text;
      this.properties = {
        id: 0,
        members: [],
        _margin: {
          t: 20,
          l: 30,
          b: 30,
          r: 30
        },
        relations: {},
        lat: 0,
        long: 0
      };
    },
    addTo: function(map) {
      map.addLayer(this);
      return this;
    },
    getD3: function() {
      this._count = 0;
      this._canvas = $(".canvas");
      this._width = this._canvas.width() - this.properties._margin.l - this.properties._margin.r;
      this._height = this._canvas.height() - this.properties._margin.t - this.properties._margin.b;
      this._svg = d3.select(".").append("svg").attr("width", this._width + this.properties._margin.l + this.properties._margin.r).attr("height", this._height + this.properties._margin.t + this.properties._margin.b).append("g").attr("transform", "translate(" + this.properties._margin.l + "," + this.properties._margin.t + ")");
      this._svg.selectAll("text").data(this.properties.text).enter().append("text").attr("width", 2400).attr("height", 200).style("font-family", "Impact").attr("fill", "black").text(function(d) {
        return d.description;
      }).on("mouseover", function() {
        d3.select(this).transition().duration(300).style("fill", "gray");
      }).on("mouseout", function() {
        d3.select(this).transition().duration(300).style("fill", "black");
      }).transition().delay(0).duration(1).each("start", function() {
        d3.select(this).transition().duration(1).attr("y", (this._count + 1) * 30);
        this._count = this._count + 1;
      }).transition().duration(11).delay(1).style("opacity", 1);
      this._count = this._count + 1;
      return this._svg;
    },
    removeAnyLocation: function() {
      return d3.select(this._m.getPanes().overlayPane).select(".leaflet-zoom-animated").selectAll("g").data([]).exit().remove();
    },
    setViewByLocation: function(d) {
      return this._m.setView(new L.LatLng(d.lat, d.long), 19, {
        animation: true,
        duration: 50
      });
    },
    showLocation: function(d) {
      var featureData;
      featureData = [];
      featureData.push(new L.LatLng(d.lat, d.long));
      this._g = d3.select(this._m.getPanes().overlayPane).select(".leaflet-zoom-animated").selectAll("g");
      return this._g.data(featureData).enter().append("g").append("circle").attr("r", 0).attr("stroke", "white").attr("fill", "none").attr("stroke-width", "10").attr("cx", (function(_this) {
        return function(d) {
          return _this._m.latLngToLayerPoint(d).x;
        };
      })(this)).attr("cy", (function(_this) {
        return function(d) {
          return _this._m.latLngToLayerPoint(d).y;
        };
      })(this)).transition().delay(120).duration(1000).attr("r", 80).attr("stroke", "gray").attr("stroke-width", "0").attr("fill", "none");
    },
    makeMap: function() {
      var map, textControl;
      map = $("body").append("<div id='map'></div>");
      L.mapbox.accessToken = "pk.eyJ1IjoiYXJtaW5hdm4iLCJhIjoiSTFteE9EOCJ9.iDzgmNaITa0-q-H_jw1lJw";
      this._m = L.mapbox.map("map", "arminavn.ib1f592g", {
        zoomAnimation: true,
        zoomAnimationThreshold: 4,
        inertiaDeceleration: 4000,
        animate: true,
        duration: 1.75,
        easeLinearity: 0.1
      }).setView([42.34, -71.12], 13);
      this._m.boxZoom.enable();
      this._m.scrollWheelZoom.disable();
      textControl = L.Control.extend({
        options: {
          position: "topleft"
        },
        onAdd: (function(_this) {
          return function(map) {
            var disable3D;
            _this._m = map;
            _this._textDomEl = L.DomUtil.create('div', 'container paratext-info');
            _this._el = L.DomUtil.create('svg', 'svg');
            _this._m.getPanes().overlayPane.appendChild(_this._el);
            L.DomUtil.enableTextSelection(_this._textDomEl);
            _this._m.getPanes().overlayPane.appendChild(_this._textDomEl);
            _this._textDomObj = $(L.DomUtil.get(_this._textDomEl));
            _this._textDomObj.css('width', $(_this._m.getContainer())[0].clientWidth / 3);
            _this._textDomObj.css('height', $(_this._m.getContainer())[0].clientHeight);
            _this._textDomObj.css('background-color', 'white');
            _this._textDomObj.css('overflow', 'scroll');
            L.DomUtil.setOpacity(L.DomUtil.get(_this._textDomEl), 0.8);
            if (_this._viewSet === void 0) {
              _this._viewSet = _this._m.getCenter();
            }
            L.DomUtil.setPosition(L.DomUtil.get(_this._textDomEl), L.point(40, -65), disable3D = 0);
            _this._d3text = d3.select(".paratext-info").append("ul").style("list-style-type", "none").style("padding-left", "0px").attr("width", $(_this._m.getContainer())[0].clientWidth / 3).attr("height", $(_this._m.getContainer())[0].clientHeight - 80);
            _this._d3li = _this._d3text.selectAll("li").data(_this.text).enter().append("li");
            _this._d3li.style("font-family", "Helvetica").style("line-height", "2").style("margin-top", "10px").style("padding-right", "20px").style("padding-left", "40px").attr("id", function(d, i) {
              return "line-" + i;
            }).text(function(d, i) {
              var timeout;
              _this._leafletli = L.DomUtil.get("line-" + i);
              timeout = void 0;
              L.DomEvent.addListener(_this._leafletli, 'click', function(e) {
                e.stopPropagation();
                _this.removeAnyLocation();
                _this.setViewByLocation(d);
                return _this.showLocation(d);
              });
              L.DomEvent.addListener(_this._leafletli, 'mouseout', function(e) {
                timeout = 0;
                return e.stopPropagation();
              });
              L.DomEvent.addListener(_this._leafletli, 'mouseover', function(e) {
                $(this).css('cursor', 'pointer');
                e.stopPropagation();
                timeout = setTimeout(function() {
                  _this._m._initPathRoot();
                  if (timeout !== 0) {
                    _this.removeAnyLocation();
                    _this.showLocation(d);
                    return timeout = 0;
                  }
                }, 200);
              }, function() {});
              return d.description;
            }).style("font-size", "16px").style("color", "rgb(72,72,72)").on("mouseover", function(d, i) {
              $(this).css('cursor', 'pointer');
              d3.select(this).transition().duration(0).style("color", "black").style("background-color", "rgb(208,208,208) ").style("opacity", 1);
            }).on("mouseout", function(d, i) {
              d3.select(this).transition().duration(1000).style("color", "rgb(72,72,72)").style("background-color", "white").style("opacity", 1);
            }).transition().duration(1).delay(1).style("opacity", 1);
            _this._m.whenReady(function() {});
            return _this._textDomEl;
          };
        })(this),
        onSetView: (function(_this) {
          return function(map) {
            return _this._m = map;
          };
        })(this)
      });
      this._m.addControl(new textControl());
      return this._m;
    },
    connectRelation: function() {
      return this.raw_text = this.properties.text;
    }
  });

  L.paratext = function(text) {
    return new L.ParaText(text);
  };

  addChainedAttributeAccessor = function(obj, propertyAttr, attr) {
    return obj[attr] = function() {
      var newValues;
      newValues = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (newValues.length === 0) {
        return obj[propertyAttr][attr];
      } else {
        obj[propertyAttr][attr] = newValues[0];
        return obj;
      }
    };
  };

  queue().defer(d3.csv, "ccn_18062014_data.csv").await(function(err, texts) {
    draw(texts);
  });

  draw = function(data) {
    var $texts, paratext, textmap, texts;
    paratext = L.paratext(data);
    textmap = paratext.makeMap();
    texts = d3.selectAll("li");
    $texts = $(texts[0]);
    return $texts.each(function() {
      $(this).data("datum", $(this).prop("__data__"));
    });
  };

}).call(this);
